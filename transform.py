import cv2  # opencv-python библиотека
import numpy as np


def order_points(pts):
    # инициализация списка координат в порядке: 1 - верхнеяя левая,
    # 2 - верхняя правая, 3 - нижняя правая,
    # 4 - нижняя левая
    rect = np.zeros((4, 2), dtype='float32')  # массив (4 строки, 2 столбца) заолненный 0.

    s = pts.sum(axis=1)  # считаем сумму коорриднат для выявления большей и большей суммы
    rect[0] = pts[np.argmin(s)]  # меньшая сумма -- верхняя левая точка
    rect[2] = pts[np.argmax(s)]  # большая сумма -- нижняя правая точка

    diff = np.diff(pts, axis=1)  # считаем разность коорриднат для выявления большей и большей разности
    rect[1] = pts[np.argmin(diff)]  # меньшая разность -- верхняя правая точка
    rect[3] = pts[np.argmax(diff)]  # большая разность -- нижняя левая точка
    print(s, rect)
    return rect  # возвращем упорядоченнйы массив


def four_point_transform(image, pts):
    rect = order_points(pts)  # получаем упорядоченные точки
    (tl, tr, br, bl) = rect  # и распаковываем их

    #  высчитываем ширину изображения, котоая равна максимальной дистанции х-координат
    #  нижней правой и нижней левой точек или верхней правой и верхней левой точки
    width_a = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    width_b = np.sqrt(((tr[0] - bl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    max_width = max(int(width_a), int(width_b))

    #  высчитываем высоту изображения, котоая равна максимальной дистанции y-координат
    #  верхней правой и нижней правой точек или верхней левой и нижней левой точки
    height_a = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    height_b = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    max_height = max(int(height_a), int(height_b))

    #  теперь, после получения изменрений нового изображения, построим набор точку для получения изображения
    #  'birds eye view' (взгляд сверху вниз), и снова распределим точки в порядке в.л, в.п, н.п, н.л
    dst = np.array([[0, 0], [max_width - 1, 0], [max_width, max_height - 1], [0, max_height - 1]], dtype='float32')

    # вычисляем матрицу преобразования перспективы
    matrix = cv2.getPerspectiveTransform(rect, dst)  # матрица преобразования(ф-ция получает исходные точки изображения
    # и точки, которые мы расчитали для изображения)
    warped = cv2.warpPerspective(image, matrix, (max_width, max_height))  # применяем матрицу преобразования
    return warped  # возвращаем преобразованное изображение
